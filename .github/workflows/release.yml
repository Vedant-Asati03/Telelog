name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  # Build and test before releasing
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Run Rust tests
        run: cargo test --all-features
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Create virtual environment
        run: python -m venv .venv
      - name: Activate virtual environment
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
      - name: Upgrade pip
        run: .venv/bin/pip install --upgrade pip
      - name: Install maturin and pytest
        run: .venv/bin/pip install maturin pytest
      - name: Build Python module
        run: .venv/bin/maturin develop

  # Build Python wheels for multiple platforms
  build-wheels:
    needs: test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        target:
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        exclude:
          # Only build Linux targets on Ubuntu
          - os: windows-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: aarch64-unknown-linux-gnu
          - os: macos-latest
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            target: aarch64-unknown-linux-gnu
          # Only build Windows targets on Windows
          - os: ubuntu-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-pc-windows-msvc
          # Only build macOS targets on macOS
          - os: ubuntu-latest
            target: x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-apple-darwin
          - os: windows-latest
            target: aarch64-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: python -m venv .venv
      - name: Activate virtual environment
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
      - name: Upgrade pip
        run: .venv/bin/pip install --upgrade pip
      - name: Install maturin
        run: .venv/bin/pip install maturin

      - name: Build wheels
        run: |
          set -e
          if .venv/bin/maturin build --release --target ${{ matrix.target }} --out dist; then
            echo "Wheel build succeeded."
          else
            if grep -q 'Couldn\'t find any python interpreters' <<<"$(.venv/bin/maturin build --release --target ${{ matrix.target }} --out dist 2>&1)"; then
              echo "No compatible Python interpreter for target ${{ matrix.target }}, skipping wheel build."
              exit 0
            else
              echo "Wheel build failed for another reason."
              exit 1
            fi
          fi

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist/

  # Release Python package to PyPI
  release-python:
    needs: [test, build-wheels]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist/

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create virtual environment
        run: python -m venv .venv
      - name: Activate virtual environment
        run: |
          echo "VIRTUAL_ENV=$GITHUB_WORKSPACE/.venv" >> $GITHUB_ENV
          echo "$GITHUB_WORKSPACE/.venv/bin" >> $GITHUB_PATH
      - name: Upgrade pip
        run: .venv/bin/pip install --upgrade pip
      - name: Install maturin
        run: .venv/bin/pip install maturin

      - name: Check PyPI token
        run: |
          if [ -z "${{ secrets.PYPI_API_TOKEN }}" ]; then
            echo "Error: PYPI_API_TOKEN secret is not set."
            exit 1
          fi
      - name: Publish to PyPI
        run: |
          PKG_NAME=$(python3 -c "import toml; print(toml.load('pyproject.toml')['project']['name'])")
          PKG_VERSION=$(python3 -c "import toml; print(toml.load('pyproject.toml')['project']['version'])")
          if python3 -m pip install --disable-pip-version-check --index-url https://pypi.org/simple/ "$PKG_NAME==$PKG_VERSION" 2>/dev/null; then
            echo "Version $PKG_VERSION of $PKG_NAME already exists on PyPI, skipping publish."
            exit 0
          fi
          .venv/bin/maturin publish --skip-existing --username __token__ --password ${{ secrets.PYPI_API_TOKEN }} dist/*

  # Create GitHub release
  github-release:
    needs: [release-python]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist/
      - name: Check wheels exist
        run: |
          if [ ! -d dist ] || [ -z "$(ls -A dist)" ]; then echo "No wheels found in dist/" && exit 1; fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
